---
# Dépendances de base
- name: Install base deps
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    update_cache: yes

# Purge l'éventuel containerd.io (Docker) qui désactive CRI
- name: Purge containerd.io if present
  apt:
    name: containerd.io
    state: absent
    purge: yes
  register: purge_containerd_io
  ignore_errors: true

# Containerd Ubuntu + cri-tools
- name: Install containerd & cri-tools
  apt:
    name:
      - containerd
      - cri-tools
    state: present
    update_cache: yes

- name: Ensure /etc/containerd exists
  file:
    path: /etc/containerd
    state: directory
    mode: "0755"

# Config containerd avec CRI actif + SystemdCgroup=true
- name: Write containerd config.toml (CRI enabled)
  copy:
    dest: /etc/containerd/config.toml
    mode: "0644"
    content: |
      version = 2
      disabled_plugins = []
      oom_score = 0

      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          sandbox_image = "registry.k8s.io/pause:3.9"
          [plugins."io.containerd.grpc.v1.cri".registry]
            config_path = "/etc/containerd/certs.d"
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            default_runtime_name = "runc"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
  notify: Restart containerd

# Appliquer tout de suite le redémarrage
- name: Flush handlers (restart containerd now)
  meta: flush_handlers

# Pré-req kernel & sysctl
- name: Ensure kernel modules file
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: Ensure overlay loaded
  command: modprobe overlay
  changed_when: false

- name: Ensure br_netfilter loaded
  command: modprobe br_netfilter
  changed_when: false

- name: Kubernetes sysctl settings
  copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables=1
      net.bridge.bridge-nf-call-ip6tables=1
      net.ipv4.ip_forward=1
  notify: Reload sysctl

- name: Disable swap (runtime)
  command: swapoff -a
  changed_when: false

- name: Disable swap (fstab)
  replace:
    path: /etc/fstab
    regexp: '(^.*\sswap\s.*$)'
    replace: '# \1'

# Service containerd (assure démarré après flush)
- name: Ensure containerd enabled & started
  systemd:
    name: containerd
    enabled: yes
    state: started
    daemon_reload: yes

# Attend le socket après redémarrage effectif
- name: Wait for containerd socket
  wait_for:
    path: /run/containerd/containerd.sock
    state: present
    timeout: 180

# Vérification CRI (unique source of truth)
- name: Verify CRI is reachable (crictl info)
  shell: "crictl --runtime-endpoint=unix:///run/containerd/containerd.sock info"
  register: crictl_info
  retries: 15
  delay: 4
  until: crictl_info.rc == 0

# Repo Kubernetes
- name: Add Kubernetes apt repo
  shell: |
    set -e
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ k8s_version_repo }}/deb/Release.key \
      | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_version_repo }}/deb/ /' \
      > /etc/apt/sources.list.d/kubernetes.list
    apt-get update
  args:
    creates: /etc/apt/sources.list.d/kubernetes.list

- name: Install kubeadm, kubelet, kubectl
  apt:
    name: [kubeadm, kubelet, kubectl]
    state: present
    update_cache: yes

- name: Hold kube packages
  command: apt-mark hold kubeadm kubelet kubectl
  changed_when: false

- name: Enable kubelet
  systemd:
    name: kubelet
    enabled: yes

- name: Pause to let services settle
  pause:
    seconds: "{{ pause_short | default(10) }}"

